import telebot
import sqlite3
import os
from datetime import datetime
from flask import Flask, request
from threading import Thread
from telebot.types import ReplyKeyboardMarkup

# --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
TOKEN = os.getenv("TOKEN")
ALLOWED_USERS = list(map(int, os.getenv("ALLOWED_USERS").split(",")))

bot = telebot.TeleBot(TOKEN)

# --- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ---
conn = sqlite3.connect("logoped_bot.db", check_same_thread=False)
c = conn.cursor()
c.execute('''CREATE TABLE IF NOT EXISTS clients (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT UNIQUE,
    balance INTEGER DEFAULT 0
)''')
c.execute('''CREATE TABLE IF NOT EXISTS sessions (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    client_id INTEGER,
    date TEXT,
    attended INTEGER DEFAULT 0,
    FOREIGN KEY(client_id) REFERENCES clients(id)
)''')
conn.commit()

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
def main_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞", "üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤")
    markup.add("üìÖ –ó–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞", "‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –ø–æ—Å–µ—â–µ–Ω–∏–µ")
    markup.add("üí∞ –í–Ω–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É", "üìä –ë–∞–ª–∞–Ω—Å –∫–ª–∏–µ–Ω—Ç–∞")
    markup.add("üßæ –ò—Å—Ç–æ—Ä–∏—è –∫–ª–∏–µ–Ω—Ç–∞", "üóìÔ∏è –û—Ç—á—ë—Ç –Ω–∞ –Ω–µ–¥–µ–ª—é")
    markup.add("‚ñ∂Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    return markup

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
@bot.message_handler(commands=["start"])
def handle_start(message):
    if message.chat.id not in ALLOWED_USERS:
        bot.send_message(message.chat.id, "‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    bot.send_message(message.chat.id, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –õ–æ–≥–æ–ø–µ–¥-–ë–æ—Ç–∞!", reply_markup=main_menu())

@bot.message_handler(func=lambda msg: msg.text == "‚ñ∂Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
def restart_interface(message):
    bot.send_message(message.chat.id, "üîÅ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=main_menu())

@bot.message_handler(func=lambda msg: msg.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞")
def ask_client_name(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞:")
    bot.register_next_step_handler(msg, save_client_name)

def save_client_name(message):
    try:
        c.execute("INSERT INTO clients (name) VALUES (?)", (message.text,))
        conn.commit()
        bot.send_message(message.chat.id, f"‚úÖ –ö–ª–∏–µ–Ω—Ç {message.text} –¥–æ–±–∞–≤–ª–µ–Ω.")
    except:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

@bot.message_handler(func=lambda msg: msg.text == "üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤")
def list_clients(message):
    c.execute("SELECT name FROM clients")
    clients = c.fetchall()
    msg = "\n".join([f"‚Ä¢ {name[0]}" for name in clients]) if clients else "‚ùå –ö–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç."
    bot.send_message(message.chat.id, msg)

@bot.message_handler(func=lambda msg: msg.text == "üìÖ –ó–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞")
def ask_who_to_schedule(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞:")
    bot.register_next_step_handler(msg, ask_date)

def ask_date(message):
    name = message.text
    c.execute("SELECT id FROM clients WHERE name = ?", (name,))
    result = c.fetchone()
    if result:
        client_id = result[0]
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–Ω—è—Ç–∏—è (–ì–ì–ì–ì-–ú–ú-–î–î):")
        bot.register_next_step_handler(msg, lambda m: save_session(m, client_id))
    else:
        bot.send_message(message.chat.id, "‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")

def save_session(message, client_id):
    try:
        date = datetime.strptime(message.text, "%Y-%m-%d").date()
        c.execute("INSERT INTO sessions (client_id, date) VALUES (?, ?)", (client_id, str(date)))
        conn.commit()
        bot.send_message(message.chat.id, "üìÖ –ó–∞–Ω—è—Ç–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ.")
    except:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.")

@bot.message_handler(func=lambda msg: msg.text == "‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –ø–æ—Å–µ—â–µ–Ω–∏–µ")
def ask_attendance_name(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞:")
    bot.register_next_step_handler(msg, mark_attended)

def mark_attended(message):
    name = message.text
    today = datetime.now().date()
    c.execute("SELECT id FROM clients WHERE name = ?", (name,))
    client = c.fetchone()
    if client:
        client_id = client[0]
        c.execute("UPDATE sessions SET attended = 1 WHERE client_id = ? AND date = ?", (client_id, str(today)))
        conn.commit()
        bot.send_message(message.chat.id, "‚úÖ –ü–æ—Å–µ—â–µ–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ.")
    else:
        bot.send_message(message.chat.id, "‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@bot.message_handler(func=lambda msg: msg.text == "üí∞ –í–Ω–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É")
def ask_payment_name(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞:")
    bot.register_next_step_handler(msg, ask_amount)

def ask_amount(message):
    name = message.text
    c.execute("SELECT id FROM clients WHERE name = ?", (name,))
    client = c.fetchone()
    if client:
        client_id = client[0]
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã:")
        bot.register_next_step_handler(msg, lambda m: save_payment(m, client_id))
    else:
        bot.send_message(message.chat.id, "‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")

def save_payment(message, client_id):
    try:
        amount = int(message.text)
        c.execute("UPDATE clients SET balance = balance + ? WHERE id = ?", (amount, client_id))
        conn.commit()
        bot.send_message(message.chat.id, f"üí∞ –û–ø–ª–∞—Ç–∞ {amount}‚ÇΩ —É—á—Ç–µ–Ω–∞.")
    except:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å—É–º–º—ã.")

@bot.message_handler(func=lambda msg: msg.text == "üìä –ë–∞–ª–∞–Ω—Å –∫–ª–∏–µ–Ω—Ç–∞")
def ask_balance_name(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞:")
    bot.register_next_step_handler(msg, show_balance)

def show_balance(message):
    name = message.text
    c.execute("SELECT balance FROM clients WHERE name = ?", (name,))
    result = c.fetchone()
    if result:
        bot.send_message(message.chat.id, f"üí∏ –ë–∞–ª–∞–Ω—Å {name}: {result[0]}‚ÇΩ")
    else:
        bot.send_message(message.chat.id, "‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@bot.message_handler(func=lambda msg: msg.text == "üßæ –ò—Å—Ç–æ—Ä–∏—è –∫–ª–∏–µ–Ω—Ç–∞")
def ask_history_name(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞:")
    bot.register_next_step_handler(msg, show_history)

def show_history(message):
    name = message.text
    c.execute("SELECT id, balance FROM clients WHERE name = ?", (name,))
    client = c.fetchone()
    if not client:
        bot.send_message(message.chat.id, "‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    client_id, balance = client
    c.execute("SELECT date, attended FROM sessions WHERE client_id = ? ORDER BY date", (client_id,))
    sessions = c.fetchall()

    if not sessions:
        bot.send_message(message.chat.id, f"üì≠ –£ –∫–ª–∏–µ–Ω—Ç–∞ {name} –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–Ω—è—Ç–∏–π.")
        return

    text = f"üìò –ò—Å—Ç–æ—Ä–∏—è –¥–ª—è {name}:\n–ë–∞–ª–∞–Ω—Å: {balance}‚ÇΩ\n\n"
    for date, attended in sessions:
        status = "‚úÖ –ë—ã–ª" if attended else "‚ùå –ù–µ –±—ã–ª"
        text += f"{date}: {status}\n"

    bot.send_message(message.chat.id, text)

@bot.message_handler(func=lambda msg: msg.text == "üóìÔ∏è –û—Ç—á—ë—Ç –Ω–∞ –Ω–µ–¥–µ–ª—é")
def weekly_report(message):
    today = datetime.now().date()
    end = today.replace(day=min(today.day + 6, 28))
    c.execute("""SELECT clients.name, sessions.date, sessions.attended
                 FROM sessions
                 JOIN clients ON clients.id = sessions.client_id
                 WHERE date BETWEEN ? AND ?
                 ORDER BY date""", (str(today), str(end)))
    rows = c.fetchall()
    if rows:
        text = ""
        for name, date, attended in rows:
            status = "‚úÖ" if attended else "‚ùå"
            text += f"{date}: {name} ‚Äî {status}\n"
        bot.send_message(message.chat.id, text)
    else:
        bot.send_message(message.chat.id, "üïí –ó–∞–ø–∏—Å–µ–π –Ω–∞ –Ω–µ–¥–µ–ª—é –Ω–µ—Ç.")

# --- Flask —Å–µ—Ä–≤–µ—Ä –¥–ª—è webhook ---
app = Flask(__name__)

@app.route("/", methods=["GET"])
def home():
    return "–Ø –∂–∏–≤!"

@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    update = telebot.types.Update.de_json(request.stream.read().decode("utf-8"))
    bot.process_new_updates([update])
    return "!", 200

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=8080)
